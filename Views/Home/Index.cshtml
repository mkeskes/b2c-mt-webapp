@using System.Security.Principal
@model IEnumerable<System.Security.Claims.Claim>
@{
    ViewData["Title"] = "Home Page";
}


<div>
        @if (User.Identity.IsAuthenticated)
        {
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Type)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Value)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <br/><br/>
            @if (User.IsInRole("admin"))
            {
                <p>You can <a asp-controller="Members" asp-action="Invite">create invitation urls for other users</a> to join your tenant: @User.FindFirst("appTenantName").Value </p>
            }
            <p>Use this url to return back to same tenant later: <a href=@ViewBag.ReturnUrl>@ViewBag.ReturnUrl</a></p>
        }
        else
        {
        <p>Demonstrates the use of a single Azure AD B2C directory as identity service for a multi-tenant SaaS application.</p>
        <h4><b>I am replacing this web app with a <a href="https://b2cmultitenantv2.z22.web.core.windows.net/">React SPA app</a> and some extra functionality.</b></h4>
        <p>
            A SaaS application commonly uses the concept of a <b>tenant</b> to denote the customers using their service, typically enterprises.
            These in turn are groups of users, employees of the enterpise, whose use of the application
            is separated from that of another any other group/tenant/enterprise. For example, a SaaS application may provide accounting
            services. Each business using the application is considered a tenant in the application. To distinguish such a tenant
            from Azure AD tenants, this application uses the term <b>application tenant</b>. (Azure AD is also a SaaS application, hence it
            also has the concept of a tenant).
        </p>
        <p>
            In this sample an individual can either <a href="~/home/newtenant">create</a> a new application tenant or <a href="/home/membersignin">
            sign in</a> to a tenant they are already a member of. Once a tenant is created, it's creator (admin)
            can invite other users by sending an invitation generated by this application to their email address. (That functionality is
            exposed only to creators of new tenants). Tenants created by users using AAD (Work or school address)
            can flag their tenant as allowing any other user from the same directory to join the tenant without invitation.
            In that case, user access to the tenant is controlled through the enterprise Applications
            tab in the directory portal. These user will not show up as members of the tenant in this application. Other user
            may still be invited to this tenant. To sign-in to the app, the AAD users need to use the domain=commonaad and tenant=tenantName url parameters.
        </p>
        <p>
        Once signed up, a user may sign-in again by appending <i>?p=tenantName</i> parameter to the app url. Otherwise (if there is no such
            parameter), B2C will pick the first tenant the user is a member of or refuse sign in altogether.
        </p>
         <p>Source code for this app may be <a href="https://github.com/mrochon/b2csamples">found on github.</a></p>
        <p>For more info <a href="mailto:sailingrock@live.com">email me</a> or use the github source repo comments area.</p>
        }
    </div>
